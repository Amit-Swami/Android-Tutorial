<?xml version="1.0" encoding="utf-8"?>
<ScrollView android:layout_height="match_parent"
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent">
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".Tab1Grid12List1"
    android:orientation="vertical">
    <androidx.appcompat.widget.Toolbar
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:theme="@style/Base.ThemeOverlay.AppCompat.Dark"
        app:popupTheme="@style/Base.ThemeOverlay.AppCompat.Light"
        android:background="@color/colorPrimary">
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Android Tutorial"
            android:textSize="20dp"
            android:textColor="#ffffff"
            android:textStyle="bold"/>

    </androidx.appcompat.widget.Toolbar>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#a4c"
        android:textSize="17dp"
        android:textStyle="bold"
        android:text="Process:"/>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="By default, all components of the same application run in the same process and most applications should not change this. However, if you find that you need to control which process a certain component belongs to, you can do so in the manifest file."
        android:textSize="16sp"
        android:textColor="#000"/>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#000"
        android:textSize="16sp"
        android:layout_marginTop="10dp"
        android:text="The manifest entry for each type of component element—'activity', 'service', 'receiver', and 'provider'—supports an android:process attribute that can specify a process in which that component should run. You can set this attribute so that each component runs in its own process or so that some components share a process while others do not. You can also set android:process so that components of different applications run in the same process—provided that the applications share the same Linux user ID and are signed with the same certificates."/>

    <View
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:background="#000"
        android:layout_marginTop="15dp">

    </View>
    <View
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:background="#000"
        android:layout_marginTop="10dp">

    </View>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#a4c"
        android:textSize="17dp"
        android:textStyle="bold"
        android:layout_marginTop="15dp"
        android:text="Threads:"/>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="When an application is launched, the system creates a thread of execution for the application, called 'main.' This thread is very important because it is in charge of dispatching events to the appropriate user interface widgets, including drawing events. It is also almost always the thread in which your application interacts with components from the Android UI toolkit (components from the android.widget and android.view packages). As such, the main thread is also sometimes called the UI thread. However, under special circumstances, an app's main thread might not be its UI thread; for more information, see Thread annotations."
        android:textColor="#000"
        android:textSize="16sp"/>

    <View
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:background="#000"
        android:layout_marginTop="15dp">

    </View>
    <View
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:background="#000"
        android:layout_marginTop="10dp">

    </View>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="#a4c"
        android:textSize="17dp"
        android:textStyle="bold"
        android:layout_marginTop="15dp"
        android:text="Interprocess Communication:"/>
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="16sp"
        android:text="Android offers a mechanism for interprocess communication (IPC) using remote procedure calls (RPCs), in which a method is called by an activity or other application component, but executed remotely (in another process), with any result returned back to the caller. This entails decomposing a method call and its data to a level the operating system can understand, transmitting it from the local process and address space to the remote process and address space, then reassembling and reenacting the call there. Return values are then transmitted in the opposite direction. Android provides all the code to perform these IPC transactions, so you can focus on defining and implementing the RPC programming interface."
        android:textColor="#000"
        />
</LinearLayout>
</ScrollView>